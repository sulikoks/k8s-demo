name: Docker Image CI
on:
  push:
    branches: [ "master" ]

jobs:

  tests:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
#      - name: Cache dependencies
#        uses: actions/cache@v2
#        with:
#          path: ~/.npm
#          key: npm-${{ hashFiles('package-lock.json') }}
#          restore-keys: npm-
      - name: Set env
        run: echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      - name: Test
        run: echo "$GITHUB_SHA_SHORT = ${{ env.GITHUB_SHA_SHORT }}"

  build:
    runs-on: ubuntu-latest
    needs: tests
    environment: prod
    env:
      IMAGE_NAME: k8s-demo
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Get app version
        run: |
          echo "VERSION=v$(npm run version --silent)" >> $GITHUB_ENV

      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}



#  build:
#    runs-on: ubuntu-latest
#    needs: tests
#    environment: prod
#    env:
#      DOCKERHUB_HOST: ${{ secrets.DOCKERHUB_HOST }}
#      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
#      IMAGE_NAME: "sulikoks/k8s-demo:test"
#    steps:
#    - uses: actions/checkout@v3
#    - name: Login in Docker HUB
#      run: echo "$DOCKERHUB_HOST" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin "$DOCKERHUB_PASSWORD"
#    - name: Build the Docker image
#      run: docker build -t "$IMAGE_NAME" .
#    - name: Push the Docker image
#      run: docker push "$IMAGE_NAME"
